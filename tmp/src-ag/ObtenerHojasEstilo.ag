
imports{
import DownloadProcess
import ParserCSS
}

-- tagEstilo verifica si es un tag estilo como <style> ... </style>
ATTR NTree NTrees [ tagEstilo: Bool ||]
SEM NRoot
    | NRoot ntree.tagEstilo = False

SEM NTree
    | NTree ntrees.tagEstilo
                = case @node.self of
                      NTag name _ _ -> compareStrings "style" name
                      otherwise     -> False

-- Si es un tagEstilo, el texto del tag es una hoja de estilo, entonces le envio al parser
-- hacemos lo mismo si es un tag link o xml de estilos
-- caso contrario, no es nada (lista vacia)
-- Subimos al NRoot todas las Hojas de Estilo (excepto los de Estilo Atributos)

ATTR NTree NTrees [|| reglas: {MapSelector}]
SEM NTrees
    | Cons lhs.reglas = Map.unionWith (++) @hd.reglas @tl.reglas
    | Nil  lhs.reglas = Map.empty

SEM NTree
    | NTree lhs.reglas 
                = let nsel = case @node.self of
                                NText str 
                                    -> if @lhs.tagEstilo 
                                       then parseHojaInterna str
                                       else Map.empty
                                NTag nm _ at
                                    -> if compareStrings "link" nm && 
                                          verificarLinkAtributos at
                                       then getHojaExterna at
                                       else Map.empty
                  in Map.unionWith (++) nsel @ntrees.reglas

{
getHojaExterna atProps 
    = let url   = atProps  Map.! "href"
          path  = getStylePath url
      in parseHojaExterna path
}

{
--verificarXMLAtributos at
--    = href && tipo
--    where href = Map.member "href" at
--          tipo = maybe False (== "text/css") $ Map.lookup "type" at

verificarLinkAtributos at
    = href && rel && tipo
    where href = Map.member "href" at
          rel  = maybe False (== "stylesheet") $ Map.lookup "rel" at
          tipo = maybe False (== "text/css")   $ Map.lookup "type" at
}

-- obtenemos los AtributoEstilo. Buscamos en los atributos de cada Nodo en el NTree
SEM NTree
    | NTree loc.atributoEstilo
                = case @node.self of
                      NTag name _ attrs 
                         -> maybe Map.empty 
                                  (parseEstiloAtributo name) 
                                  (Map.lookup "style" attrs)
                      otherwise
                         -> Map.empty

-- Obteniendo la Hoja de Estilo del UserAgent y User
ATTR NRoot [defaultcss4html, usercss4html:{MapSelector} ||]

-- Redistribuyendo las Hojas de Estilo de todos (excepto los de Estilo Atributos)
ATTR NTrees NTree [ css:{MapSelector} ||]
SEM NRoot
    | NRoot ntree.css = let estiloExterno = Map.unionWith (++) @lhs.usercss4html @lhs.defaultcss4html
                        in Map.unionWith (++) @ntree.reglas estiloExterno

-- Creamos una variable para todas las hojas de estilo (incluye Estilo Atributos): misHojasEstilo
SEM NTree
    | NTree loc.misHojasEstilo = Map.unionWith (++) @loc.atributoEstilo @lhs.css
 
