PRAGMA genlinepragmas

imports{
module FSBox
( FSRoot (..)
, FSBox (..)
, Object (..)
, procesarFSBox
) where

import qualified Data.Map as M
import Property
}

DATA FSRoot
    | FSRoot fsbox: FSBox

DATA FSBox
    | FSBox name : String
            props: {M.Map String Property}
            boxes: FSBoxes

TYPE FSBoxes = [FSBox]

-- Computing yPos
ATTR FSBox FSBoxes [| yPos: Int |]
SEM FSRoot
    | FSRoot fsbox.yPos = yInit

SEM FSBox
    | FSBox loc.yPos   = @lhs.yPos
            boxes.yPos = @lhs.yPos + ySep
            lhs.yPos   = @boxes.yPos
SEM FSBoxes
    | Cons hd.yPos  = @lhs.yPos
           tl.yPos  = @lhs.yPos
           lhs.yPos = max @hd.yPos @tl.yPos
    | Nil  lhs.yPos = @lhs.yPos


-- Computing xPos

-- "len" is the horizontal lenght of an element box and his children boxes
ATTR FSBox FSBoxes [|| len USE {+} {0}: Int ]
SEM FSBox
    | FSBox loc.len = if @boxes.len == 0
                      then widthBox + xSep
                      else @boxes.len
            lhs.len = @loc.len

ATTR FSBox FSBoxes [ | xPos:Int | ]
SEM FSRoot
    | FSRoot fsbox.xPos = xInit

SEM FSBox
    | FSBox boxes.xPos = @lhs.xPos
            lhs.xPos   = @boxes.xPos
            loc.xPos   = @lhs.xPos + (@loc.len `div` 2) + (xSep `div` 2) - (widthBox `div` 2)

SEM FSBoxes
    | Cons hd.xPos  = @lhs.xPos
           tl.xPos  = @lhs.xPos + @hd.len
           lhs.xPos = @tl.xPos
    | Nil  lhs.xPos = @lhs.xPos

{
xInit       = 10
yInit       = 10
xSep        = 40
ySep        = 80
widthBox    = 95
heightBox   = 50

}

-- formatting datatypes
DATA Object
    | OBox   name     : String 
             position : {(Int,Int)}
             dimention: {(Int,Int)}
             props    : {M.Map String Property}
    | OLine pt1: {(Int,Int)} 
            pt2: {(Int, Int)}
    | ODimention  width : Int 
                  height: Int

-- Generating (x,y) positions for lines
ATTR FSBox [|| pt1:{(Int,Int)} ]
SEM FSBox
    | FSBox lhs.pt1 = (@loc.xPos + (widthBox `div` 2),@loc.yPos)
            loc.pt2 = (@loc.xPos + (widthBox `div` 2),@loc.yPos + heightBox)

ATTR FSBoxes [|| pt1 USE {:} {[]} : {[(Int,Int)]}]

-- Generating Drawing Functions
ATTR FSRoot FSBox FSBoxes [|| out USE {++} {[]}: {[Object]}]
SEM FSRoot
    | FSRoot lhs.out = (ODimention @fsbox.len @fsbox.yPos) : @fsbox.out

SEM FSBox
    | FSBox lhs.out = let cmdVec = map (OLine @loc.pt2) @boxes.pt1
                      in ((OBox @name (@loc.xPos,@loc.yPos) (widthBox,heightBox) @props) : @boxes.out) ++ cmdVec

{
procesarFSBox :: FSRoot -> [Object]
procesarFSBox = sem_FSRoot
}
