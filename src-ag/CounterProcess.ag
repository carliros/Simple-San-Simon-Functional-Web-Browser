
imports{
import Process.CounterScope
}

-- counter's quotes
ATTR NTree NTrees [| quoteScope : {(Int,Int)} |]
SEM NTree
    | NTree loc.myQuoteScope  = updateQuotes @lhs.quoteScope    (fst @loc.computedContentValueProps)
            ntrees.quoteScope = @loc.myQuoteScope
            lhs.quoteScope    = updateQuotes @ntrees.quoteScope (snd @loc.computedContentValueProps)

SEM NTrees
    | Cons hd.quoteScope  = @lhs.quoteScope
           tl.quoteScope  = @hd.quoteScope
           lhs.quoteScope = @tl.quoteScope
    | Nil  lhs.quoteScope = @lhs.quoteScope

SEM NRoot
    | NRoot ntree.quoteScope = (0,0)

{-
    counter's scope
    The scope of a counter starts at the first element in the document that has a counter-reset fot that counter
    and includes the element's descendants and its following siblings with their descendants. However, it does not
    include any elements in the scope of a counter with the same name created by a counter-reset on a later sibling
    or by a later counter-reset on the same element.
-}
ATTR NTree [ | counterScope: {Map.Map String Scope} | ]
SEM NTree
    | NTree loc.myCounterScope  = updateScope @lhs.counterScope @loc.computedContentValueProps @loc.computedValueProps
            ntrees.counterScope = fst @loc.myCounterScope
            lhs.counterScope    = snd @loc.myCounterScope

ATTR NTrees [ counterScope: {Map.Map String Scope} || ]
SEM NTrees
    | Cons hd.counterScope  = @lhs.counterScope
           tl.counterScope  = @hd.counterScope

SEM NRoot
    | NRoot ntree.counterScope = Map.empty

{
updateQuotes (open,close) props
    = let (o,c) = countQuotes $ computedValue $ props `get` "content"
      in (open + o, close + c)
    where countQuotes valueContent
            = case valueContent of
                ListValue lst             -> foldr (\(a,b) (c,d) -> (a+c,b+d)) (0,0) $ map countQuotes lst
                KeyValue "open-quote"     -> (1,0)
                KeyValue "no-open-quote"  -> (1,0)
                KeyValue "close-quote"    -> (0,1)
                KeyValue "no-close-quote" -> (0,1)
                otherwise                 -> (0,0)

updateScope scope (propsBefore, propsAfter) props
    = let resetScope1 = resetScope (scope,scope) $ computedValue $ propsBefore `get` "counter-reset"
          resetScope2 = resetScope resetScope1   $ computedValue $ propsAfter  `get` "counter-reset"
          resetScope3 = resetScope resetScope2   $ computedValue $ props       `get` "counter-reset"
          increScope1 = incrScope  resetScope3   $ computedValue $ propsBefore `get` "counter-increment"
          increScope2 = incrScope  increScope1   $ computedValue $ propsAfter  `get` "counter-increment"
          increScope3 = incrScope  increScope2   $ computedValue $ props       `get` "counter-increment"
      in increScope3
}

