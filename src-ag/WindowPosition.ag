
-- Generating an x and y position for all BoxTree elements
ATTR WindowTree Element WindowTrees Lines Line [statePos: {(FormattingContext,(Int,Int))} ||]
SEM WindowRoot
    | WindowRoot windowTree.statePos = (NoContext, (0,0))
SEM WindowTree
    | WindowItemContainer
        loc.markerPosition
            = let (x,y) = snd @lhs.statePos
              in (x,y + 2) -- para nivelar los bordes
        loc.position 
            = let cposition = computedValue $ @props `get` "position"
                  (x,y)     = let pos = snd @lhs.statePos
                              in (fst @sizeMarker + fst pos + 6, snd pos)
              in case cposition of
                    KeyValue "static"   -> (x,y)
                    KeyValue "relative" -> let (xdespl, ydespl) = getDesplazamiento @props
                                           in (x + xdespl, y + ydespl)
                    otherwise           -> error $ "[fstree fase 2] I am not considering this position value: " ++ show cposition
        elem.statePos = let pointContent = getTopLeftContentPoint Full @props
                        in (BlockContext, pointContent)
    | WindowContainer
        loc.position = let cposition = computedValue $ @props `get` "position"
                           (x,y)     = snd @lhs.statePos
                       in case cposition of
                            KeyValue "static"   -> (x,y)
                            KeyValue "relative" -> let (xdespl, ydespl) = getDesplazamiento @props
                                                   in (x + xdespl, y + ydespl)
                            otherwise           -> error $ "[fstree fase 2] I am not considering this position value: " ++ show cposition
        elem.statePos = let pointContent = getTopLeftContentPoint @tCont @props
                        in (@fcnxt, pointContent)
    | WindowText
        loc.position = let cposition = computedValue $ @props `get` "position"
                           (x,y)     = let (x,y1) = snd @lhs.statePos
                                           y2     = case @loc.vdisplay of
                                                        "inline"  -> (fst @lhs.maxLogicalMetrics) - (@loc.verticalAlign + @loc.fontTop + (thd4 @loc.extSize))
                                                        otherwise -> 0
                                       in (x,y1+y2)
                       in case cposition of
                            KeyValue "static"   -> (x,y)
                            KeyValue "relative" -> let (xdespl, ydespl) = getDesplazamiento @props
                                                   in (x + xdespl, y + ydespl)
                            otherwise           -> error $ "[fstree fase 2] I am not considering this position value: " ++ show cposition

SEM WindowTrees
    | Cons hd.statePos = @lhs.statePos
           tl.statePos = case fst @lhs.statePos of
                            InlineContext -> let (x,y) = snd @lhs.statePos
                                             in (InlineContext, ((fst @hd.size) + x + 6 , y))  -- 6 es la cantidad de un espacio en pixels
                            BlockContext  -> let (x,y) = snd @lhs.statePos
                                             in (BlockContext , (x, (snd @hd.size) + y))

SEM Lines
    | Cons hd.statePos = let (x,y) = snd @lhs.statePos
                             newX  = if @lhs.amifirstline
                                     then x + @lhs.indent   -- aplicamos indent solo a la primera linea
                                     else x
                         in ( fst @lhs.statePos,(newX, y))
           tl.statePos = let (x,y) = snd @lhs.statePos
                             newY  = y + @hd.lineHeight     -- avanzamos de acuerdo al height de la linea, y no su size
                         in ( fst @lhs.statePos,(x, newY))

SEM Line
    | Line winds.statePos = case @lhs.align of
                                "left"   -> @lhs.statePos
                                "right"  -> let (_,y) = snd @lhs.statePos
                                                newX  = @lhs.width - @winds.innerLineWidth
                                            in (fst @lhs.statePos, (newX,y))
                                "center" -> let (_,y) = snd @lhs.statePos
                                                newX  = (@lhs.width - @winds.innerLineWidth) `div` 2
                                            in (fst @lhs.statePos, (newX,y))
                                otherwise -> error $ "[FSTreeFase2] I am not considering this align value: " ++ show @lhs.align

ATTR Element Lines Line [width: Int ||]
SEM WindowTree
    | WindowItemContainer
        elem.width = toInt $ unPixelUsedValue "WindowPosition.ag" $ fst @loc.cbSize
    | WindowContainer
        elem.width = toInt $ unPixelUsedValue "WindowPosition.ag" $ fst @loc.cbSize

-- who is the first line?
ATTR Lines [amifirstline: Bool ||]
SEM Element
    | ELines lines.amifirstline = True

SEM Lines
    | Cons tl.amifirstline = False

-- downloading the indent value
ATTR Element Lines [indent: Int ||]
SEM WindowTree
    | WindowItemContainer
        elem.indent = toInt $ unPixelUsedValue "WindowPosition.ag" $ @props `get` "text-indent"
    | WindowContainer
        elem.indent = toInt $ unPixelUsedValue "WindowPosition.ag" $ @props `get` "text-indent"
SEM Element
    | ELines lines.indent = @lhs.indent

-- downloading the align value
ATTR Element Lines Line [align: String ||]
SEM WindowTree
    | WindowItemContainer
        elem.align = unKeyUsedValue $ @props `get` "text-align"
    | WindowContainer
        elem.align = unKeyUsedValue $ @props `get` "text-align"

-- uploading a right-align point value
ATTR Line WindowTrees [ || innerLineWidth: Int]
SEM WindowTrees
    | Cons lhs.innerLineWidth = (fst @hd.size) + 6 + @tl.innerLineWidth
    | Nil  lhs.innerLineWidth = 0

{
-- get the desplazamiento
getDesplazamiento props = let top    = toInt $ unPixelComputedValue $ props `get` "top"
                              right  = toInt $ unPixelComputedValue $ props `get` "right"
                              bottom = toInt $ unPixelComputedValue $ props `get` "bottom"
                              left   = toInt $ unPixelComputedValue $ props `get` "left"
                          in (despl left right, despl top bottom)
    where despl first second = if (((&&) `on` (== 0)) first second)
                               then 0
                               else if first /= 0         
                                    then first                -- I suppose direction = ltr, this agree with (first && second /= 0)
                                    else (-1) * second        -- left = -right, top = -bottom
}
