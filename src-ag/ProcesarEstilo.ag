PRAGMA genlinepragmas

imports{
-- | Calcula la especificidad de un selector y lo añade como el 5to elemento de una Regla
module ProcesarEstilo (
  calcularEspecificidad
, MapSelector
) where

import qualified Data.Map as Map
import Data.DataTreeCSS
}

INCLUDE "../src/Data/DataTreeCSS.ag"

-- Atributo que contiene la misma informacion (self) de si mismo
SET All = * - SRoot
ATTR All [ || self: SELF]

-- contando los pseudo elementos en 'd'
ATTR MaybePseudo [ || d: Int ]
SEM MaybePseudo
    | Just    lhs.d = 1     -- tiene un pseudo
    | Nothing lhs.d = 0     -- no tiene pseudo

-- contando los atributos ID en 'b' y los otros atributos en 'c'
-- luego sumamos todos los 'b' y 'c'
ATTR Atributos Atributo [ || b, c USE {+} {0}: Int]
SEM Atributo
    | AtribID     lhs.b = 1   
                  lhs.c = 0   -- 0 (cero) porque no tiene otros atributos
    | AtribNombre lhs.b = 0   -- 0 (cero) porque no es ID
                  lhs.c = 1
    | AtribTipoOp lhs.b = 0   -- 0 (cero) porque no es ID
                  lhs.c = 1

-- contamos los nombres de los elementos en 'd', 
-- los atributos universales no tienen nombre
-- dejamos 'b' y 'c' sin tocarlos
-- luego sumamos los 'b', 'c' y 'd'
ATTR Selector ESelector SSelector [ || b, c, d USE {+} {0}: Int ]
SEM SSelector
    | TypeSelector lhs.d = @maybePseudo.d + 1

-- generamos la especificidad de un selector
-- si se trata de una regla tipo AtributoEstilo
-- colocamos 1 como resultado porque no tiene selectores
-- caso contrario generamos el numero
-- el output es la Regla + especificidad
ATTR Regla [ || output: {(Tipo, Origen, Selector, Declaraciones, Int)}]
SEM Regla
    | Tuple lhs.output 
                = let especificidad 
                        = if @x1.self == EstiloAtributo
                          then 1000
                          else @x3.b * (10^3) + 
                               @x3.c * (10^2) + 
                               @x3.d * 10
                  in ( @x1.self
                     , @x2.self
                     , @x3.self
                     , @x4.self
                     , especificidad
                     )

-- recoge todas las nuevas reglas en una lista
ATTR HojaEstilo [ || output USE {:} {[]}: {[( Tipo
                                           , Origen
                                           , Selector
                                           , Declaraciones
                                           , Int)]}]

-- expande las declaraciones y colocal en reverso a los selectores
ATTR SRoot [ || output2: {MapSelector}]
SEM SRoot
    | SRoot lhs.output2
                = let fMap (t,o,s,d,e) map' = Map.insertWith (++) (reverse s) [(t,o,d,e)] map'
                  in foldr fMap Map.empty @he.output

{
type MapSelector = Map.Map Selector [(Tipo,Origen,Declaraciones,Int)]

-- | calcula la especificadad de un selector, 
--   y lo añade como el 5to elemento de la Regla
calcularEspecificidad :: HojaEstilo -> MapSelector
calcularEspecificidad = sem_SRoot . SRoot
}
