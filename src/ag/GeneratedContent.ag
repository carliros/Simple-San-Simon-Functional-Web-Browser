
{
generateBoxContent props srcProps counterScope (open,close)
    = case computedValue (props Map.! "content") of
            ListValue list    -> genBoxes list
            KeyValue "none"   -> [Nothing]
            KeyValue "normal" -> [Nothing]
    where getQuote lst
            = let depth = open - close
                  len   = length lst
              in if ((depth >= 1) && (depth <= len))
                 then Just $ lst !! (depth - 1)
                 else if depth > len
                      then Just $ last lst
                      else Nothing
          genBoxes []
            = []
          genBoxes (e:es) 
            = case e of
                StringValue str           -> (Just $ BoxText props Map.empty str) : genBoxes es
                Counter key style         -> if Map.member key counterScope
                                             then case style of
                                                    Nothing 
                                                        -> let value = show $ getHead $ counterScope Map.! key
                                                           in (Just $ BoxText props Map.empty value) : genBoxes es
                                                    Just val 
                                                        -> case val of
                                                                KeyValue "none"
                                                                    -> genBoxes es
                                                                KeyValue "disc"
                                                                    -> let attrs = Map.singleton "src" "disc.png"
                                                                       in (Just $ BoxContainer "???" "inline" props True attrs []) : genBoxes es
                                                                KeyValue "circle"
                                                                    -> let attrs = Map.singleton "src" "circle.png"
                                                                       in (Just $ BoxContainer "???" "inline" props True attrs []) : genBoxes es
                                                                KeyValue "square"
                                                                    -> let attrs = Map.singleton "src" "square.png"
                                                                       in (Just $ BoxContainer "???" "inline" props True attrs []) : genBoxes es
                                                                KeyValue "decimal"
                                                                    -> let value = show $ getHead $ counterScope Map.! key
                                                                       in (Just $ BoxText props Map.empty value) : genBoxes es
                                                                KeyValue "lower-roman"
                                                                    -> let value = toRomanLower $ getHead $ counterScope Map.! key
                                                                       in (Just $ BoxText props Map.empty value) : genBoxes es
                                                                KeyValue "upper-roman"
                                                                    -> let value = toRomanUpper $ getHead $ counterScope Map.! key
                                                                       in (Just $ BoxText props Map.empty value) : genBoxes es
                                             else genBoxes es
                Counters key sep style    -> if Map.member key counterScope
                                             then case style of
                                                    Nothing 
                                                        -> let value = reverse $ concat $ intersperse sep $ mapScope show $ counterScope Map.! key
                                                           in (Just $ BoxText props Map.empty value) : genBoxes es
                                                    Just val 
                                                        -> case val of
                                                                KeyValue "none"
                                                                    -> genBoxes es
                                                                KeyValue "disc"
                                                                    -> let attrs = Map.singleton "src" "disc.png"
                                                                       in (Just $ BoxContainer "???" "inline" props True attrs []) : genBoxes es
                                                                KeyValue "circle"
                                                                    -> let attrs = Map.singleton "src" "circle.png"
                                                                       in (Just $ BoxContainer "???" "inline" props True attrs []) : genBoxes es
                                                                KeyValue "square"
                                                                    -> let attrs = Map.singleton "src" "square.png"
                                                                       in (Just $ BoxContainer "???" "inline" props True attrs []) : genBoxes es
                                                                KeyValue "decimal"
                                                                    -> let value = reverse $ concat $ intersperse sep $ mapScope show $ counterScope Map.! key
                                                                       in (Just $ BoxText props Map.empty value) : genBoxes es
                                                                KeyValue "lower-roman"
                                                                    -> let value = reverse $ concat $ intersperse sep $ mapScope toRomanLower $ counterScope Map.! key
                                                                       in (Just $ BoxText props Map.empty value) : genBoxes es
                                                                KeyValue "upper-roman"
                                                                    -> let value = reverse $ concat $ intersperse sep $ mapScope toRomanUpper $ counterScope Map.! key
                                                                       in (Just $ BoxText props Map.empty value) : genBoxes es
                                             else genBoxes es
                KeyValue "open-quote"     -> case computedValue (srcProps Map.! "quotes") of
                                                ListValue lst  -> case getQuote lst of
                                                                     Just (QuoteValue str _) -> (Just $ BoxText props Map.empty str) : genBoxes es
                                                                     Nothing                 -> Nothing : genBoxes es
                                                KeyValue "none" -> (Just $ BoxText props Map.empty "\"") : genBoxes es
                KeyValue "close-quote"    -> case computedValue (srcProps Map.! "quotes") of
                                                ListValue lst  -> case getQuote lst of
                                                                     Just (QuoteValue _ str) -> (Just $ BoxText props Map.empty str) : genBoxes es
                                                                     Nothing                 -> Nothing : genBoxes es
                                                KeyValue "none" -> (Just $ BoxText props Map.empty "\"") : genBoxes es
                KeyValue "no-open-quote"  -> Nothing : genBoxes es
                KeyValue "no-close-quote" -> Nothing : genBoxes es

}
