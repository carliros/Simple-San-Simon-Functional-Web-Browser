
-- distribuiting the width and height of the containing block
SEM WindowTree
    | WindowItemContainer
        loc.cbSize = (@props Map.! "width", @props Map.! "height")
    | WindowContainer
        loc.cbSize = (@props Map.! "width", @props Map.! "height")
    | WindowText 
        loc.cbSize = (@props Map.! "width", @props Map.! "height")

-- vertical align
SEM WindowTree
    | WindowText
        loc.verticalAlign = case usedValue (@props Map.! "vertical-align") of
                                KeyValue "baseline"    -> 0
                                KeyValue "sub"         -> -10
                                KeyValue "super"       -> 10
                                KeyValue "text-top"    -> ( fst @lhs.maxFontMetrics)    - @loc.fontTop
                                KeyValue "text-bottom" -> ((snd @lhs.maxFontMetrics)    - @loc.fontBottom)*(-1)
                                --KeyValue "top"         -> ( fst @lhs.maxLogicalMetrics) - @loc.fontTop
                                --KeyValue "bottom"      -> ((snd @lhs.maxLogicalMetrics) - @loc.fontBottom)*(-1)
                                --KeyValue "middle"      -> 
                                PixelNumber num        -> toInt num
    | WindowContainer
        loc.verticalAlign = case usedValue (@props Map.! "vertical-align") of
                                KeyValue "baseline"    -> 0
                                KeyValue "sub"         -> -10
                                KeyValue "super"       -> 10
                                KeyValue "text-top"    -> if @bRepl
                                                          then ( fst @lhs.maxFontMetrics) - (snd @loc.size)
                                                          else ( fst @lhs.maxFontMetrics) - @loc.fontTop
                                KeyValue "text-bottom" -> if @bRepl
                                                          then ((snd @lhs.maxFontMetrics) - (snd @loc.size))*(-1)
                                                          else ((snd @lhs.maxFontMetrics) - @loc.fontBottom)*(-1)
                                {-KeyValue "top"         -> if @bRepl
                                                          then ( fst @lhs.maxLogicalMetrics) - (snd @loc.size)
                                                          else ( fst @lhs.maxLogicalMetrics) - @loc.fontTop
                                KeyValue "bottom"      -> if @bRepl
                                                          then ((snd @lhs.maxLogicalMetrics) - (snd @loc.size))*(-1)
                                                          else ((snd @lhs.maxLogicalMetrics) - @loc.fontBottom)*(-1)
                                -}
                                --KeyValue "middle"      -> 
                                PixelNumber num        -> toInt num
-- font metrics
ATTR Element WindowTree [|| fontMetrics: {(Int,Int)}]
SEM WindowTree
    | WindowText
        loc.fontMetrics = unsafePerformIO $ getSizeBox @text @lhs.cb @props
        loc.fontTop     = csnd @loc.fontMetrics - cthd @loc.fontMetrics
        loc.fontBottom  = cthd @loc.fontMetrics
        lhs.fontMetrics = (@loc.fontTop, @loc.fontBottom)
    | WindowContainer
        loc.fontMetrics = if @bRepl
                          then (0, 0)   -- I don't consider the font properties of a replaced-element
                          else @elem.fontMetrics
        loc.fontTop     = fst @loc.fontMetrics
        loc.fontBottom  = snd @loc.fontMetrics
        lhs.fontMetrics = @loc.fontMetrics
    | WindowItemContainer
        loc.fontMetrics = @elem.fontMetrics
        loc.fontTop     = fst @loc.fontMetrics
        loc.fontBottom  = snd @loc.fontMetrics
        lhs.fontMetrics = @loc.fontMetrics

ATTR WindowTrees [|| fontMetrics USE {:} {[]}: {[(Int,Int)]}]

SEM Element
    | EWinds   lhs.fontMetrics = foldr tmax (0,0) @winds.fontMetrics    -- verificar con el maximo de numeros negativos
    | ELines   lhs.fontMetrics = (0,0)   -- I don't use this value
    | ENothing lhs.fontMetrics = (0,0)   -- I don't use this value

-- logical metrics
ATTR Element WindowTree [|| logicalMetrics: {(Int,Int)}]
SEM WindowTree
    | WindowText
        lhs.logicalMetrics = let line_height = toInt $ unPixelUsedValue $ @props Map.! "line-height"
                                 halfleading = (line_height - (csnd @loc.fontMetrics)) `div` 2
                                 logTop      = @loc.fontTop    + halfleading + @loc.verticalAlign
                                 logBottom   = @loc.fontBottom + halfleading - @loc.verticalAlign
                             in (logTop, logBottom)
    | WindowContainer
        lhs.logicalMetrics = if @bRepl
                             then let logTop    = snd @loc.size + @loc.verticalAlign
                                      logBottom = 0             - @loc.verticalAlign
                                  in (logTop, logBottom)
                             else @elem.logicalMetrics
    | WindowItemContainer
        lhs.logicalMetrics = @elem.logicalMetrics

ATTR WindowTrees [|| logicalMetrics USE {:} {[]}: {[(Int,Int)]}]

SEM Element
    | EWinds   lhs.logicalMetrics = foldr tmax (0,0) @winds.logicalMetrics
    | ELines   lhs.logicalMetrics = (0,0)   -- I don't use this value
    | ENothing lhs.logicalMetrics = (0,0)   -- I don't use this value

-- calculating the maximum font and logical metrics
ATTR WindowTrees WindowTree Element [ maxFontMetrics: {(Int,Int)}
                                      maxLogicalMetrics: {(Int,Int)}
                                    ||]
SEM Line
    | Line winds.maxFontMetrics    = foldr tmax (0,0) @winds.fontMetrics
           loc.lineMetrics         = foldr tmax (0,0) @winds.logicalMetrics
           winds.maxLogicalMetrics = @loc.lineMetrics

SEM Element
    | EWinds winds.maxFontMetrics    = @lhs.maxFontMetrics
             winds.maxLogicalMetrics = @lhs.maxLogicalMetrics

SEM WindowRoot
    | WindowRoot windowTree.maxFontMetrics    = (0,0)     -- I don't use this value
                 windowTree.maxLogicalMetrics = (0,0)     -- I don't use this value

{
tmax (t1,b1) (t2,b2) = let maxt = t1 `max` t2
                           maxb = b1 `max` b2
                       in (maxt,maxb)
}

-- generating a width and height for all boxtrees, and uploading it until the root element
ATTR WindowRoot WindowTree Line [|| size: {(Int,Int)}]
SEM WindowTree
    | WindowText
        loc.vdisplay = unKeyComputedValue $ @props Map.! "display"
        loc.extSize  = getExternalSizeBox4Tuple @props
        loc.size = let (w,h) = (cfst @loc.fontMetrics, csnd @loc.fontMetrics)
                       (we,he) = let (wl,wr,ht,hb) = @loc.extSize
                                 in case (@tCont) of
                                        Full   -> (wl+wr,ht+hb)
                                        Init   -> (wl   ,ht+hb)
                                        End    -> (   wr,ht+hb)
                                        Medium -> (0    ,ht+hb)
                   in ( if compareKeyPropertyValue (usedValue (fst @loc.cbSize)) "auto"
                        then w + we
                        else (toInt $ unPixelUsedValue $ fst @loc.cbSize) + we
                      , if compareKeyPropertyValue (usedValue (snd @loc.cbSize)) "auto"
                        then h + he
                        else (toInt $ unPixelUsedValue $ snd @loc.cbSize) + he
                      )
        lhs.size = @loc.size

    | WindowContainer
        loc.vdisplay = unKeyComputedValue $ @props Map.! "display"
        loc.extSize  = getExternalSizeBox4Tuple @props
        loc.size 
           = case @loc.vdisplay of
                  "block"  
                    -> let (we,he) = (cfst @loc.extSize + csnd @loc.extSize, cthd @loc.extSize + cfth @loc.extSize)
                       in ( (toInt $ unPixelUsedValue $ fst @loc.cbSize) + we       -- the width of the containing block
                          , if (compareKeyPropertyValue (usedValue (snd @loc.cbSize)) "auto")
                            then case @fcnxt of
                                    "block"  -> foldr (\t v -> (snd t) + v) 0 @elem.size + he   -- sum of heights of size
                                    "inline" -> (sum @elem.lineHeights) + he                      -- sum of height of each line
                            else (toInt $ unPixelUsedValue $ snd @loc.cbSize) + he  -- the specified height
                          )
                  "inline" 
                    -> case @fcnxt of
                        "inline"
                            -> if @bRepl
                               then let (we,he) = (cfst @loc.extSize + csnd @loc.extSize, cthd @loc.extSize + cfth @loc.extSize)
                                    in case (mapTuple (\v -> compareKeyPropertyValue (usedValue v) "auto") @loc.cbSize) of
                                          (False, False) -> ( (toInt $ unPixelUsedValue $ fst @loc.cbSize) + we
                                                            , (toInt $ unPixelUsedValue $ snd @loc.cbSize) + he)
                                          (True , True ) -> let (w,h) = getImageSize (getAttribute "src" @attrs)
                                                            in (w+we, h+he)
                                          (False, True ) -> let (w,h) = getImageSize (getAttribute "src" @attrs)
                                                            in (w+we, h+he)
                                          {-
                                          (True , False) -> 
                                          -}
                               else -- I am doing this because all inline non-replaced elements have width and height of "auto"
                                    let (w ,h)  = ( foldr (\t v -> (fst t)   +   v) 0 @elem.size    -- the sum of the widths of the children
                                                  , foldr (\t v -> (snd t) `max` v) 0 @elem.size    -- the max height of all the children
                                                  ) 
                                        (we,he) = let (wl,wr,ht,hb) = @loc.extSize
                                                  in case (@tCont) of
                                                        Full   -> (wl+wr,ht+hb)
                                                        Init   -> (wl   ,ht+hb)
                                                        End    -> (   wr,ht+hb)
                                                        Medium -> (0    ,ht+hb)
                                        widthSpace = 6 * (length @elem.size - 1)
                                    in (w+we+widthSpace,h+he)
                        "block" -- need to be analized
                            -> let (we,he) = (cfst @loc.extSize + csnd @loc.extSize, cthd @loc.extSize + cfth @loc.extSize)
                               in ( (toInt $ unPixelUsedValue $ fst @loc.cbSize) +we    -- the width of the containing block
                                  , foldr (\t v -> (snd t) + v) 0 @elem.size + he       -- the sum of the heights of children block boxes
                                  )
                  {-"inline-block"
                    -> let (we,he) = (cfst @loc.extSize + csnd @loc.extSize, cthd @loc.extSize + cfth @loc.extSize)
                       in ( (toInt $ unPixelUsedValue $ fst @loc.cbSize) + we       -- the width of the containing block
                          , if (compareKeyPropertyValue (usedValue (snd @loc.cbSize)) "auto")
                            then case @fcnxt of
                                    "block"  -> foldr (\t v -> (snd t) + v) 0 @elem.size + he   -- sum of heights of size
                                    "inline" -> (sum @elem.lineHeights) + he                      -- sum of height of each line
                            else (toInt $ unPixelUsedValue $ snd @loc.cbSize) + he  -- the specified height
                          )
                  -}
        lhs.size = @loc.size
    | WindowItemContainer
        loc.extSize  = getExternalSizeBox4Tuple @props
        loc.size 
           = let (we,he) = (cfst @loc.extSize + csnd @loc.extSize, cthd @loc.extSize + cfth @loc.extSize)
             in ( (toInt $ unPixelUsedValue $ fst @loc.cbSize) + we       -- the width of the containing block
                , if (compareKeyPropertyValue (usedValue (snd @loc.cbSize)) "auto")
                  then foldr (\t v -> (snd t) + v) 0 @elem.size + he        -- sum of heights of size
                  else (toInt $ unPixelUsedValue $ snd @loc.cbSize) + he    -- the specified height
                )
        lhs.size = ( (fst @sizeMarker) + fst @loc.size  -- al width del block "li" le sumamos el width del marker, pero por ahora no considero el height del marker
                   , snd @loc.size    
                   )
SEM Line
    | Line lhs.size = ( foldr (\t v -> (fst t)   +   v) 0 @winds.size
                      , foldr (\t v -> (snd t) `max` v) 0 @winds.size
                      )

ATTR WindowTrees Lines [|| size USE {:} {[]} : {[(Int,Int)]}]

ATTR Element [|| size: {[(Int,Int)]}]
SEM Element
    | EWinds   lhs.size = @winds.size   -- normal height
    | ELines   lhs.size = @lines.size   -- logicalHeight of each line
    | ENothing lhs.size = []

-- height of a line
ATTR Element Lines [|| lineHeights: {[Int]}]
SEM Element
    | EWinds   lhs.lineHeights = []
    | ELines   lhs.lineHeights = @lines.lineHeights
    | ENothing lhs.lineHeights = []

SEM Lines
    | Cons lhs.lineHeights = @hd.lineHeight : @tl.lineHeights
    | Nil  lhs.lineHeights = []

ATTR Line [|| lineHeight: Int]
SEM Line
    | Line lhs.lineHeight = funTuple (+) @loc.lineMetrics

