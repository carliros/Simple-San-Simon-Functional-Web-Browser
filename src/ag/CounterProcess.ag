
ATTR NTree NTrees [ | counterScope: {Map.Map String Int} | ]
SEM NTree
    | NTree loc.myCounterScope  = updateScope @lhs.counterScope @loc.computedContentValueProps @loc.computedValueProps
            ntrees.counterScope = @loc.myCounterScope
            lhs.counterScope    = @ntrees.counterScope
SEM NTrees
    | Cons hd.counterScope  = @lhs.counterScope
           tl.counterScope  = @hd.counterScope
           lhs.counterScope = @tl.counterScope
    | Nil  lhs.counterScope = @lhs.counterScope

SEM Root
    | Root ntree.counterScope = Map.empty

{
updateScope scope (propsBefore, propsAfter) props
    = let resetScope1 = resetValue scope       $ computedValue $ propsBefore Map.! "counter-reset"
          resetScope2 = resetValue resetScope1 $ computedValue $ propsAfter  Map.! "counter-reset"
          resetScope3 = resetValue resetScope2 $ computedValue $ props       Map.! "counter-reset"
          increScope1 = incrementValue resetScope3 $ computedValue $ propsBefore Map.! "counter-increment"
          increScope2 = incrementValue increScope1 $ computedValue $ propsAfter  Map.! "counter-increment"
          increScope3 = incrementValue increScope2 $ computedValue $ props       Map.! "counter-increment"
      in increScope3
    where incrementValue env vincrement
                = case vincrement of
                    KeyValue "none" -> env
                    ListValue lst   -> foldr updateIncrement env lst
               where updateIncrement (CounterValue str mb) newEnv
                        = case mb of
                            Just val -> Map.adjust (val +) str newEnv
                            Nothing  -> Map.adjust (1   +) str newEnv
          resetValue env vreset
                = case vreset of
                    KeyValue "none" -> env
                    ListValue lst   -> foldr updateReset env lst
              where updateReset (CounterValue str mb) newEnv 
                        = case mb of
                            Just val -> setup newEnv str val
                            Nothing  -> setup newEnv str 0
                    setup myMap key value 
                        = if Map.member key myMap
                          then Map.adjust (const value) key myMap
                          else Map.insert key value myMap

}
